#!/bin/bash

# @author Usb Key
# @mail usbkey9@gmail.com

#This script auto update current repo
#It's designed to recall script in parameter with same arguments after updating
#It has been develop to be call by every directly callable script
#It prevent to be execute too many times so don't worry if yours scripts call themselves

#Follow symlink and cd to right directory
SOURCE="${BASH_SOURCE[0]}"
while [[ -h "$SOURCE" ]]; do
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
cd "$( cd -P "$( dirname "$SOURCE" )" && pwd )"


if [[ -z "$1" ]]; then
	echo "You have to pass caller script id as parameter (./autoup \$$)";
	exit 2;
fi

ppid=$1;
debugFile="./autoup.debug";
activeFile="./autoup.on";
tmpFile="./autoup.tmp";
gitOwner=$(stat -c '%U' $(basename $0));

verbGit=" -q";
verbShell=" &>> /dev/null";
if [[ -f $debugFile ]]; then
	verbGit="";
	verbShell="";
fi

#Continue normal execution (not a git repo or up-to-date)
function normalEx(){
	exit;
}

#Update Success, need to reload script
function reloadEx(){
	local cmdl=$(cat -v /proc/$ppid/cmdline | sed 's/\^@/\ /g' && echo)

	$cmdl;
	echo;
	kill $ppid;
}

#All is in the name
function errorEx(){
	echo "Error while git auto-update. Exiting Now!";
	exit 2;
}

function checkTimeStamp() {
	local ts=$(date +%s);
	local fileTs=0;

	if [[ -f $tmpFile ]]; then fileTs=$(($(cat $tmpFile)+3600)); fi

	if [[ $fileTs -gt $ts ]]; then
		#Consider as up-to-date (useful when call multiple time by other script)
		normalEx
	else
		execCmd "echo $ts > $tmpFile";
	fi
}

function execCmd() {
	if [[ "$(whoami)" = $gitOwner ]]; then
		eval $1;
	else
		echo "User for Git Update: $gitOwner";
		su $gitOwner -c "$1 $verbShell";
	fi
}

function isRepoUp() {
	execCmd "git fetch -a $verbGit";
	[[ $(git rev-parse HEAD) = $(git rev-parse @{u}) ]];
}

#Test if code auto update is activated
if [[ ! -f $activeFile ]]; then normalEx; fi

#If debug, always update
if [[ ! -f $debugFile ]]; then checkTimeStamp; fi

#Test if it's a valid git repo
if ! git rev-parse --git-dir &>> /dev/null; then normalEx; fi

echo "———————————————————————————————————————————————————————————————————————————————";
echo "                                     Autoup";
echo "———————————————————————————————————————————————————————————————————————————————";

if ! isRepoUp; then
	echo
	echo "Code Updating...";
	execCmd "git pull $verbGit";

	if ! isRepoUp; then
		#ERROR: Repo still outdated
		errorEx
	else
		echo
		echo "Code Successfully Updated";
		#Repo successfully updated
		reloadEx
	fi
fi

#Repo up-to-date
if [[ -f $debugFile ]]; then echo "Already Up To Date"; fi
normalEx