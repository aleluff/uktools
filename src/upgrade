#!/bin/bash

# @author Usb Key
# @mail usbkey9@gmail.com
# @author Mustafa Hasturk
# @mail mustafa.hasturk@yandex.com
# @author Caio Oliveira
# @mail caiooliveirafarias0@gmail.com
# @author Christoph Kepler
# @mail development@kepler.international

#Follow symlink and cd to right directory
SOURCE="${BASH_SOURCE[0]}"
while [[ -h "$SOURCE" ]]; do
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
cd "$( cd -P "$( dirname "$SOURCE" )" && pwd )"

source ./common $$


server="kernel.ubuntu.com";
fullUrl="http://$server/~kernel-ppa/mainline/";
arch=$(dpkg --print-architecture);
trys=0;
help="Usage: $(basename -- "$0") [OPTION]...
Dowload and install last available kernel for ubuntu systems.
Settings can be saved if no options provided or by running setup script

  -d,			Download and install the last kernel using defaults settings
  -r,			Get Release Candidate kernel (default: Testing kernel)
  -s,			Get Stable kernel (default: Testing kernel)
  -l,			Get Low Latency kernel (default: Generic kernel)
  -p,			Run Purge script after Upgrade
  -h,			Show this help
";

function cleanTmp() {
	sudo rm -rf /tmp/linux-*.deb
}

function error() {
	cleanTmp
	fatalError "$1";
}

function download() {
	local filename
	filename=$(basename "$1");
	if [[ ! $reqVersion < 5.7.2 ]]; then
		filename="$arch/$filename"
	fi
	echo "$filename"

	if ! execCmd "wget -q -P /tmp $1"; then error "Download of $1 failed!"; fi

	if [[ ! "${checksums[@]}" =~ "$(shasum /tmp/$filename | awk '{ print $1 }')" ]]; then
		echo "Checksum failed for $filename !!!";

		((trys++))
		if [[ $trys > 3 ]]; then error "Too many checksums fails! Exiting"; fi

		echo "Redownloading ...";
		download "$@";
	else
		echo "Checksum for $filename succeed";
	fi
}

function downloadMulti() {
	local packages=($(lynx -dump -listonly -dont-wrap-pre $kernelURL | grep "$1" | grep "$2" | grep "$3" | awk '{print $2}' | sort | uniq));

	if [[ ${#packages[@]} < 1 ]]; then
		error "Kernel package missing. Please wait until next release";
	fi

	for package in "${packages[@]}"
	do
		download $package;
	done
}

if ! execCmd "ls /usr/bin/lynx"; then
	waitDpkg
	sudo apt-get install lynx -y;
fi

displayTitle "UkTools Upgrade";

if ! execCmd "ping -q -w 1 -c 1 $server"; then error "No network available! Exiting"; fi

if [[ "$#" = "0" ]]; then
	if [[ ! -f $cfgPath ]]; then ./setup -noup; fi
	source $cfgPath ;
else
	source $splPath ;

	while getopts 'srlphd' flag; do
		case "${flag}" in
			d)	;;
			r)	kerneltype="rc" ;;
			s)	kerneltype="stable" ;;
			l)	kernelmode="lowlatency" ;;
			p)	arm=1 ;;
			h)	echo "${help}";
				exit ;;
			*)	echo "Unexpected option ${flag}";
				echo "${help}";
				exit ;;
		esac
	done
fi

locVersion=$(dpkg -l |grep "linux-image" | grep "$kernelmode" | awk '{print $3}' | sed -e 's/-/./' | cut -d'.' -f-4 | sed -e 's/.0.*rc/-rc/' | cut -d'.' -f-3)

case "$kerneltype" in
	"rc")       kernelURL=$(lynx -dump -nonumbers $fullUrl | tail -1) ;;
	"testing")  kernelURL="$fullUrl"$(lynx -dump -nonumbers "$fullUrl" | rev | cut -d'/' -f 2 | rev | egrep "^v[0-9]*[.][0-9]*([.][0-9]*)?$" | sort -V | tail -1)"/" ;;
	"stable")   baseKernel=$(apt-cache madison linux-headers-generic | head -n 1 | awk '{ print $3 }' | cut -d'.' -f-2);
				kernelURL="$fullUrl"$(lynx -dump -nonumbers "$fullUrl" | rev | cut -d'/' -f 2 | rev | egrep "^v[0-9]*[.][0-9]*([.][0-9]*)?$" | sort -V | grep $(echo "$baseKernel" | cut -d'.' -f-2) | tail -1)"/" ;;
esac

reqVersion=$(echo $kernelURL | awk -F"/v" '{print $2}' | cut -d'/' -f 1)

if [[ $locVersion =~ $reqVersion ]]; then
	echo "Kernel up to date. Finishing";
	exit;
fi

if ! execCmd "sudo echo 0"; then error "Permission denied. Require sudo access"; fi

checksums="$(wget -qO- $kernelURL/CHECKSUMS)"

displaySubTitle "Downloading Linux Kernel $reqVersion";

cleanTmp

downloadMulti "$kernelmode" "" "$arch"

downloadMulti "all" "headers" ""

waitDpkg

echo
displaySubTitle "Installing Linux Kernel $reqVersion. Please be patient, it may take a while";

if ! execCmdAndDisplayErr "sudo dpkg -i /tmp/linux-*.deb"; then
	touch /tmp/upgrade.err;
	notify "Kernel Upgrade failed" "Please consult $logPath for details" "-u critical";
	error "Kernel Upgrade failed! See errors above";
fi

cleanTmp

notify "Kernel Upgraded to $reqVersion" "System restart required";
touch /tmp/upgrade.nr;

echo
displaySubTitle "Upgrade Finished";

if [[ $arm = 1 ]]; then ./purge ; fi

if [[ $cron = 0 ]]; then
	read -p "Do you want to reboot system now? (y/n)(10s to No):" -n 1 -t 10 -s rs
	case "$rs" in
		y | Y)  echo "Rebooting";
				sleep 2;
				sudo reboot ;;
		*)		echo "You have to reboot for using new kernel";
	esac ;
fi
